# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
import argparse,sys,os,json
import sysconfig,glob,json,shutil

parser = argparse.ArgumentParser()
parser.add_argument("--entry_point", help=\
    "sets the module where main_loop function exists if the entrypoint file does not exists it is created "+\
    "with the functions main_loop and kill")
parser.add_argument("--entry_path", help="a path where the entry_point exists")
parser.add_argument("--project_path", help="path to unreal engine project path")
#parser.add_argument("--python_bridge_path", help="path to the python bridge files")
#parser.add_argument("--python_project_path", help="path to the python project files")
parser.add_argument("--ue4path", help="path to the unreal engine")
args = parser.parse_args()

pathdata={}
cwd=os.path.abspath('.')
pathdata['bridge_path']=os.path.dirname(__file__)+'/src'
pathdata['UE4']=os.path.abspath(args.ue4path)
pathdata['project_path']=os.path.abspath(args.project_path)
if args.entry_path is not None:
    pathdata['entry_path']=os.path.abspath(args.entry_path)

ue4path=args.ue4path

minimal_file=\
"""# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
def main_loop(gworld):
    while 1:
        print('in main loop')
        yield

def kill():
    print('done!')


def reload():
    pass
"""

ue4path=pathdata['UE4']
libdir=sysconfig.get_config_var('LIBPL')
libfile=sysconfig.get_config_var('LDLIBRARY')
include_path=sysconfig.get_path('include')
file_dir=os.path.abspath(os.path.dirname(__file__))

pfile=glob.glob(pathdata['project_path']+'/*.uproject')[0]
pdata=json.load(open(pfile))
pname=pdata['Modules'][0]['Name']
prj_src_path=pathdata['project_path']+'/Source/'+pname
#print(prj_src_path)
dest_src_dir=prj_src_path+'/PyServer'
if os.path.isdir(dest_src_dir):
    shutil.rmtree(dest_src_dir)

os.mkdir(dest_src_dir)
src_files=glob.glob(pathdata['bridge_path']+'/cpp/*.cpp')+glob.glob(pathdata['bridge_path']+'/cpp/*.h')
for fl in src_files:
    open(dest_src_dir+'/'+os.path.basename(fl),'wb').write(open(fl).read().replace('PyServerPrivatePCH.h',pname+'.h').encode())

fd=open(prj_src_path+'/PyServer/PyConfig.h','w')
print('//this is autogenerated file by build.py Dont Edit!!!',file=fd)
print('#pragma once',file=fd)
assert(os.path.isfile(include_path+'/Python.h'))
print('#include "'+include_path+'/Python.h"',file=fd)
fd.close()


fd=open(pathdata['project_path']+'/run.sh','w')
print('#!/bin/bash',file=fd)
print('#This is auto generated script Don\'t Edit!!!',file=fd)
print('cd '+ue4path,file=fd)
print('export UE4EDITOR_SO='+pathdata['project_path']+'/Binaries/Linux/libUE4Editor-'+pname+'.so',file=fd)
print('export BRIDGE_ENTRY_NAME='+args.entry_point,file=fd)
print('export BRIDGE_ENTRY_PATH='+pathdata['entry_path'],file=fd)
print("""export PYTHON_LIB=`python3 -c"import sysconfig;print(sysconfig.get_config_var('LIBPL')+'/'+sysconfig.get_config_var('LDLIBRARY'))"`""",file=fd)
print("export SYSPATH="+file_dir+"/src",file=fd)
print('Engine/Binaries/Linux/UE4Editor "'+pfile+'" -nocore -project='+pfile,file=fd)
fd.close()
assert(os.system('chmod +x '+pathdata['project_path']+'/run.sh')==0)
#


fd=open(pathdata['project_path']+'/build.sh','w')

cmd="mono "+ue4path+'/Engine/Binaries/DotNET/UnrealBuildTool.exe '+pname+' Development Linux -project="'+pfile+\
    '" -editorrecompile -progress -noubtmakefiles -NoHotReloadFromIDE'
print('#!/bin/bash',file=fd)
print(cmd,file=fd)
fd.close()
assert(os.system('chmod +x '+pathdata['project_path']+'/build.sh')==0)

