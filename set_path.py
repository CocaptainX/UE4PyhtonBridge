# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
import argparse,sys,os,json
parser = argparse.ArgumentParser()
parser.add_argument("--entry_point", help=\
    "sets the module where main_loop function exists if the entrypoint file does not exists it is created "+\
    "with the functions main_loop and kill")
parser.add_argument("--entry_path", help="a path where the entry_point exists")
parser.add_argument("--project_path", help="path to unreal engine project path")
#parser.add_argument("--python_bridge_path", help="path to the python bridge files")
#parser.add_argument("--python_project_path", help="path to the python project files")
parser.add_argument("--ue4path", help="path to the unreal engine")
args = parser.parse_args()

pathdata={}
cwd=os.path.abspath('.')
pathdata['bridge_path']=cwd+'/src'
pathdata['UE4']=os.path.abspath(args.ue4path)
pathdata['project_path']=os.path.abspath(args.project_path)
if args.entry_path is not None:
    pathdata['entry_path']=os.path.abspath(args.entry_path)
json.dump(pathdata,open('path.cfg','w'))

ue4path=args.ue4path

file_str='#Autogenerated file (by config.py) dont edit!'

if args.entry_path is not None:
    file_str+='''
import sys
sys.path.append('%s')
''' % os.path.abspath(args.entry_path)

file_str+="""
import track_test
main_module=track_test
main_loop=track_test.main_loop
kill=track_test.kill
def reload():
  import imp
  imp.reload(track_test)
  if hasattr(track_test,'reload'):
    track_test.reload()
  print('entrypoint reloaded')
"""

minimal_file='''# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
def main_loop(gworld):
    while 1:
        print('in main loop')
        yield

def kill():
    print('done!')


def reload():
    pass
'''

fd=open("src/Wrappers/entry_point.py","w")
if args.entry_point is not None:
    fd.write(file_str.replace('track_test',args.entry_point))
else:
    fd.write(minimal_file)
fd.close()


